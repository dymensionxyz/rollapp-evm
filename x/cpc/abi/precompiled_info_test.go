package abi

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"
	"math"
	"math/big"
	"testing"
)

//goland:noinspection GoUnusedGlobalVariable
var (
	bigIntMaxInt64    = new(big.Int).SetUint64(math.MaxInt64)
	bigIntMaxInt64Bz  = common.BytesToHash(bigIntMaxInt64.Bytes()).Bytes()
	bigIntMaxUint64   = new(big.Int).SetUint64(math.MaxUint64)
	bigIntMaxUint64Bz = common.BytesToHash(bigIntMaxUint64.Bytes()).Bytes()
	bigIntOneBz       = common.BytesToHash(big.NewInt(1).Bytes()).Bytes()
	text              = "hello"
	textAbiEncodedBz  = []byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	maxUint8Value     = uint8(math.MaxUint8)
	maxUint8ValueBz   = common.BytesToHash([]byte{math.MaxUint8}).Bytes()
	_32Bytes          = [32]byte{0x1, 0x2, 0x3, 0x32, 0xFF}
)

func Test_PriceFeed(t *testing.T) {
	cpcInfo := PriceFeedCpcInfo

	t.Run("getPrice(string)", func(t *testing.T) {
		bz, err := cpcInfo.ABI.Methods["getPrice"].Inputs.Pack(text)
		require.NoError(t, err)

		ret, err := cpcInfo.UnpackMethodInput(
			"getPrice",
			append([]byte{0x52, 0x4f, 0x38, 0x89}, bz...),
		)
		require.NoError(t, err)
		require.Len(t, ret, 1)
		require.Equal(t, text, ret[0].(string))

		bz, err = cpcInfo.PackMethodOutput("getPrice", bigIntMaxUint64, true)
		require.NoError(t, err)
		ops, err := cpcInfo.ABI.Methods["getPrice"].Outputs.Unpack(bz)
		require.NoError(t, err)
		require.Len(t, ops, 2)
		require.Equal(t, bigIntMaxUint64, ops[0].(*big.Int))
		require.Equal(t, true, ops[1].(bool))
	})
}
